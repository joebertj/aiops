Metadata-Version: 2.1
Name: awesh
Version: 0.1.0
Summary: AI-aware interactive shell - 'AI by default, Bash when I mean Bash'
Home-page: https://github.com/aiops/awesh
Author: AI Operations Team
Author-email: aiops@example.com
License: UNKNOWN
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: System :: Shells
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.10
Description-Content-Type: text/markdown

# awesh - AI-aware Interactive Shell

**"AI by default, Bash when I mean Bash."**

awesh is an intelligent shell that automatically routes your input to either AI processing or Bash execution based on smart content detection.

## 🚀 Quick Start

### Installation

1. **Install in development mode**:
   ```bash
   cd /home/joebert/AI/aiops/awesh
   pip install -e .
   ```

2. **Run awesh**:
   ```bash
   awesh
   ```

### Alternative: Direct Python execution
```bash
cd /home/joebert/AI/aiops/awesh
python -m awesh.main
```

## 🎯 How It Works

awesh intelligently routes your input:

- **AI Processing** (default): Natural language queries, questions, requests
- **Bash Execution**: Commands detected by shell syntax or known executables

### Examples

```bash
awesh> ls -la                              # → Runs in Bash
awesh> summarize this directory structure  # → Goes to AI
awesh> cat file.txt | grep error          # → Runs in Bash (pipe detected)
awesh> why did the build fail?            # → Goes to AI
```

## ⚙️ Configuration

awesh uses `~/.aweshrc` for configuration:

```ini
[ai]
model = gpt-4
temperature = 0.1
streaming = true

[paths]
system_prompt_path = ~/.awesh_system.txt
mcp_server_path = mcp_server

[shell]
prompt_label = awesh> 
```

## 🛠️ Command Line Options

```bash
awesh --help                    # Show help
awesh --config ~/.my_aweshrc   # Custom config file
awesh --no-stream              # Disable streaming
awesh --model gpt-3.5-turbo    # Override model
awesh --dry-run-tools          # Enable dry-run for tools
```

## 🔧 Development

### Project Structure
```
awesh/
├── __init__.py          # Package initialization
├── main.py              # CLI entry point
├── config.py            # Configuration management
├── router.py            # Command routing logic
├── shell.py             # Main shell implementation (TODO)
├── bash_executor.py     # Bash command execution (TODO)
├── ai_client.py         # AI integration (TODO)
└── mcp_adapter.py       # MCP tool calls (TODO)
```

### Running Tests
```bash
python -m pytest tests/
```

## 📋 Features

- ✅ Smart command routing (Bash vs AI)
- ✅ Configuration management
- ✅ CLI argument parsing
- 🚧 Interactive shell with history
- 🚧 AI client integration
- 🚧 MCP tool execution
- 🚧 Streaming responses
- 🚧 Built-in commands (cd, pwd, exit)

## 🔒 Security

- No direct shell execution from AI models
- All tools go through MCP (Model Context Protocol) with policy enforcement
- Configurable audit logging
- No environment variable leakage to AI

## 📄 License

Apache License 2.0


